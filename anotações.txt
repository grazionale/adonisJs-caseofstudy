Instalação AdonisJs CLI
  npm install -g @adonisjs/cli

Criando uma nova aplicação com Adonis
  adonis new -h
* -h para ver as opções disponíveis

Criando projeto voltado apenas para API, sem a parte MVC de views
adonis new gonode --api-only

Colocando o servidor online
  adonis serve --dev
* a opção --dev ativa a opção do nodemon (fast reload). Quando usar em produção
nao usar o --dev

------------ Instalando e configurando EsLint ---------------------
 npm install -D eslint
 npx eslint --init

------------ Rodando migrations banco de dados relacional ---------------------
adonis migration:run

------------ Criando Controller ----------------
adonis make:controller User
** depois seleciona HTTP requests
------------ Listando Rotas ----------------
adonis route:list
------------ Rollback das migrations-------------
adonis migration:rollback
------------ Envio de e-mail com adonis -------------
doc: https://adonisjs.com/docs/4.1/mail
adonis install @adonisjs/mail

Depois, é necessário configurar um ViewProvider
app.js
const providers = [
  '@adonisjs/framework/providers/ViewProvider'
]

Depois, criar um template na raiz do projeto resouces/views/emails/nome_do_template.edge

------------ Criando Model ----------------

adonis make:model File -m -c
-m -> Cria migration
-c -> Cria controller

------------------------Validator-------------------------
Validando requisiçoes
https://adonisjs.com/docs/4.1/validator

adonis install @adonisjs/validator

adonis make:validator User

Validando objetos aninhados
Exemplo: Um usuário com Endereços

https://indicative-v5.adonisjs.com/docs/syntax-guide#_nested_data

------------------------Tratanodo exceções--------------
Como se fosse um GlobalExceptionHandler
adonis make:ehandler
Necessário alterar o comportamento padrão dos métodos do handle,
localizados em Exceptions/Handler.js

-----------------Internacionalizaçao----------------
https://adonisjs.com/docs/4.1/internationalization

adonis install @adonisjs/antl

const providers = [
  '@adonisjs/antl/providers/AntlProvider'
]


---------------Hooks - interceptors--------------------
Criação de um 'interceptor' para Tasks, onde, toda vez que
uma task for criada ou editada e houver um user_id, esse usuário
receberá um e-mail informando que essa tarefa pertecen a ele

adonis make:hook Task


--------------Usando Redis para disparo de e-mail por file ------------------

Instalando o container do Redis Alpine
--name = nome para o container
-p = redireciona a porta A da máquina para a Porta B correspondente no Docker
-d = passar o nome da imagem que sera utilizada
a versão alpine é uma versão mimificada do redis, com uma versão muito pequena
do linux rodando sobre ela


docker run --name redis -p 6379:6379 -d redis:alpine

Integarndo Redis no Adonis
https://adonisjs.com/docs/4.1/redis

> adonis install @adonisjs/redis

const providers = [
  '@adonisjs/redis/providers/RedisProvider'
]

modifica a biblioteca kue padrão do node para funcionar com adonis. biblioteca
para fazer o gerenciamento de filas.

https://github.com/nrempel/adonis-kue

yarn add adonis-kue

const providers = [
  ...
  'adonis-kue/providers/KueProvider'
]

const aceProviders = [
  ...
  'adonis-kue/providers/CommandsProvider'
]

const jobs = [
  ...
  'App/Jobs/Example'
]

adonis make:job NewTaskMail
- Seguir a instrução do comando

depois de tudo configurado, tem que colocar o kue para ficar ouvindo
adonis kue:listen

------------------- Utilizando Sentry ---------------------

no arquivo Handler.js utilizar a seguinte configuração

instalar raven

yarn add raven

async report (error, { request }) {
  Raven.config(Config.get('services.sentry.dsn'))
  Raven.captureException(error)
}

colocar o dsn nas variaveis ambientes

e configurar um service na pasta config para reotrnar o sentry dsn
